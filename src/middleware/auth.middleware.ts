import jwt from "jsonwebtoken"
import { Response, NextFunction } from "express"
import { RequestWithId } from "../interfaces/auth.interface"
import HttpException from "exceptions/HttpException"

//VERIFY TOKEN GENERATED BY THE USER WHEN LOGGED IN
export const verifyToken = async (req: RequestWithId, res: Response, next: NextFunction): Promise<void> => {
    const authHeader = req.headers.authorization
    if (authHeader) {
        const token = authHeader.split(" ")[1]
        jwt.verify(
            token,
            process.env.JWT_SEC,
            (err, payLoad) => {
                if (err) throw new HttpException(403, "Your Token is Invalid")
                req.user = payLoad
                next();
            }
        )
    } else {
        res.status(401).json({
            success: false,
            status: 401,
            message: "You are not Authorized to do this!!!"
        })
    }
}

//VERIFY USER IDENTITY
export const verifyUser = async (req: RequestWithId, res: Response, next:NextFunction): Promise<void> => {
    verifyToken(req, res, () => {
        if(req.user.id === req.params.id) {
            next();
        } else {
            res.status(401).json({
                success: false,
                status: 401,
                message: "You are not Authorized to do this!!!"
            })
        }
    })
}

//VERIFY IF THE USER IS A TRAINER
export const verifyTrainer = async (req: RequestWithId, res: Response, next: NextFunction): Promise<void> => {
    verifyToken(req, res, () => {
        if((req.user.id == req.params.id) && (req.user.role === "trainer")) {
            next();
        } else {
            res.status(401).json({
                success: false,
                status: 401,
                message: "You are not Authorized to do this!!!"
            })
        }
    })
}

//VERIFY IF THE USER IS AN ADMINISTRATOR
export const verifyAdmin = async (req: RequestWithId, res: Response, next: NextFunction): Promise<void> => {
    verifyToken(req, res, () => {
        if((req.user.id == req.params.id) && (req.user.role === "admin")) {
            next();
        } else {
            res.status(401).json({
                success: false,
                status: 401,
                message: "You are not Authorized to do this!!!"
            })
        }
    })
}